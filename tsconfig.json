{
  "compilerOptions": {
    "target": "esnext", // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
    "module": "esnext", // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
    "strict": true, // 所有的语法都会进行严格的检查
    "jsx": "preserve",
    "skipLibCheck": true, // 不校验d.ts
    "importHelpers": true,
    "moduleResolution": "node", // 选择模块解析策略
    "allowJs": true, // 是否允许在ts文件中引入js
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。import * as React from 'react'而 JavaScript 下是这样写的：import React from 'react'
    "esModuleInterop": true, //可以使用es6的方式导入node.js的方法
    "sourceMap": true,
    "noEmit": true, // 不输出(意思是不编译代码，只执行类型检查)
    "experimentalDecorators": true, // 启用对ES装饰器的实验性支持
    "noFallthroughCasesInSwitch": true, // 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
    "baseUrl": "./",
    "rootDir": "./",
    "types": ["webpack-env", "node"],
    "paths": {
      // 如果新增paths 需要重启编辑器才行
      "@/*": ["src/*"]
    },
    "lib": [
      "esnext", //es6转化成es5的环境
      "dom", //dom运行环境
      "dom.iterable", //迭代器运行环境
      "scripthost"
    ]
  },
  "include": ["typings/*.ts", "src/**/*"],
  "exclude": ["node_modules", "build", "public", "dist"]
}
